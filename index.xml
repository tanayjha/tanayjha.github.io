<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title/><link>https://tanayjha.github.io/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Jun 2022 12:09:25 +0530</lastBuildDate><atom:link href="https://tanayjha.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>The Internals of SHA 256 Algorithm</title><link>https://tanayjha.github.io/blog/sha256/</link><pubDate>Sun, 26 Jun 2022 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/sha256/</guid><description>I came across this excellent video, explaining how the SHA-256 algorithm works internally. I had always been excited to understand how a real-world hashing algorithm works internally. SHA-256 is one of the most popular hashing algorithms, so after getting my hands on that video, I knew I had to try and implement this on my own. This feels like once in a lifetime opportunity. So here I am after having implemented the algorithm on my own and feeling confident understanding how SHA-256 works.</description></item><item><title>Consistent Hashing</title><link>https://tanayjha.github.io/blog/consistent-hashing/</link><pubDate>Wed, 22 Jun 2022 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/consistent-hashing/</guid><description>I have been meaning to write this blog for some time now but somehow kept on postponing (read procrastinating&amp;hellip;). I read about this technique of Consistent Hashing a while back and was mesmerized by its elegance. Recently read it again in this brilliant blog and thought of expressing it in my own words for posterity. So let us begin.
Hashing I won&amp;rsquo;t talk too much about hashing since it is a very basic computer science concept.</description></item><item><title>Book Review: Atomic Habits</title><link>https://tanayjha.github.io/blog/atomic-habits/</link><pubDate>Fri, 28 Jan 2022 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/atomic-habits/</guid><description>I recently completed this wonderful book by James Clear, Atomic Habits. More than a book review, this is going to be a compilation of the learnings that I have from this book. The book is such a vast treasure chest of information that it is very easy to forget all of it. Even writing it down is probably not enough. The actual value of the book will come from the application of the concepts it teaches in our everyday life.</description></item><item><title>Zookeeper Internals</title><link>https://tanayjha.github.io/blog/zookeeper/</link><pubDate>Wed, 21 Jul 2021 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/zookeeper/</guid><description>I had been wanting to understand the internals of zookeeper for quite some time now. In fact, I had already read the basics a couple of times and even worked with the zkcli in my previous organization. However, as it is said that anything written down is more firmly impressed on the mind, hence I am writing this post. (This also has a reference to one of my favorite magician - Michael Vincent)</description></item><item><title>Some Mysteries of Multi-Threading</title><link>https://tanayjha.github.io/blog/multi-thread/</link><pubDate>Fri, 02 Apr 2021 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/multi-thread/</guid><description>If you have been programming professionally for some time, you probably would have used threads. When used correctly, threads can provide significant speed up in the program.
I had also written multithreaded programs many times at Sumo Logic. However, recently I felt that since threading is such an important topic, I should probably dive a little deeper into how things work there.
I started off by reading Java Concurrency in Practice and although I have gone through only a couple of chapters right now, but still I have discovered some interesting things which I was not aware of before.</description></item><item><title>Euclids GCD Algorithm</title><link>https://tanayjha.github.io/blog/euclid-gcd-algo/</link><pubDate>Mon, 08 Mar 2021 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/euclid-gcd-algo/</guid><description>This post is going to focus on a very simple concept, finding the GCD of two numbers. If you think this is too easy and we don&amp;rsquo;t need a post on it, well you are probably right :D. You might even be knowing of efficient ways of finding the GCD (mostly used in competitive programming). But many of you may not be aware of the mathematics and proof behind how that method works.</description></item><item><title>Deduping at Scale</title><link>https://tanayjha.github.io/blog/deduping-at-scale/</link><pubDate>Sun, 29 Nov 2020 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/deduping-at-scale/</guid><description>Today I am going to talk about a project which I worked on in my organisation Sumo Logic.
We have this microservice which is used for collecting data from the cloud. One of the most prominent use case of that microservice is to collect data from customers S3 bucket.
I have written another blog on how we worked on making data discovery faster so that we can reduce ingestion lag. You can check it out here.</description></item><item><title>Detecting starting point of loop in a linked list</title><link>https://tanayjha.github.io/blog/starting-point-linked-list/</link><pubDate>Thu, 06 Jun 2019 12:01:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/starting-point-linked-list/</guid><description>Detecting the starting point of a loop in a linked list is a very popular problem. In fact most you reading this might already be knowing the algorithm to solve this. However understanding why that algorithm works is a separate challenge altogether.
I was in the same state and decided to find an explanation of why it works. I could not find convincing explanations by simple google searches and hence decided to right this blog.</description></item><item><title>Fermats Little Theorem</title><link>https://tanayjha.github.io/blog/fermats-little-theorem/</link><pubDate>Thu, 08 Jun 2017 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/fermats-little-theorem/</guid><description>In my post on RSA encryption system I mentioned the use of Fermat&amp;rsquo;s little theorem. In this post I am going to give a formal proof (and explain in simple terms) the theorem itself. This will also give you a chance to boast among your friends (possibly nerdy) that you know the proof to one of Fermat’s theorem ;)
THE STATEMENT Fermat&amp;rsquo;s little theorem states that: For any integer a not divisible by p and any prime p, the following always holds: a(p-1) ≡ 1 (mod p) The reason why the theorem states that a should not be divisible by p is very clear.</description></item><item><title>Chinese Remainder Theorem</title><link>https://tanayjha.github.io/blog/chinese-remainder-theorem/</link><pubDate>Wed, 26 Apr 2017 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/chinese-remainder-theorem/</guid><description>In this post I would like to talk about the Chinese Remainder Theorem. You might have heard this problem as a kid: There are x number of things. When taken in groups of 5, they leave a remainder 1. When taken in groups of 7, they leave a remainder 2. When taken in groups of 9, they leave a remainder 3. And when taken in groups of 11, they leave a remainder 4.</description></item><item><title>RSA Encryption System</title><link>https://tanayjha.github.io/blog/rsa-encryption/</link><pubDate>Sat, 22 Apr 2017 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/rsa-encryption/</guid><description>THE NEED OF ENCRYPTION In today&amp;rsquo;s world where a lot of secured information like our credit card number, passwords etc., travel around the web, the presence of a secure encryption system is almost inevitable.
We want a method to encrypt a message, send it over the insecure internet connection and allow only the receiver to be able to decrypt and read the original message. This exact problem was solved by Rivest, Shamir and Adleman(RSA) in the year 1978, in their paper A Method for Obtaining Digital Signatures and Public-Key Cryptosystems.</description></item><item><title>Max Flow Min Cut</title><link>https://tanayjha.github.io/blog/max-flow-min-cut/</link><pubDate>Fri, 21 Apr 2017 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/max-flow-min-cut/</guid><description>PS: The images in this blogpost were hosted on a site which was taken down so they are lost and I don&amp;rsquo;t remember where I took them originally from so this is hard to read right now. Have to fix this in future.
MIN CUT We have already talked about the maximum flow problem. Now is a good time to talk about a seemingly different but actually quite similar to the maximum flow problem, i.</description></item><item><title>Maximum Flow</title><link>https://tanayjha.github.io/blog/max-flow/</link><pubDate>Wed, 19 Apr 2017 12:09:25 +0530</pubDate><guid>https://tanayjha.github.io/blog/max-flow/</guid><description>PROBLEM DESCRIPTION The problem of finding the maximum flow in a network, has a history which dates back to the second world war.
Practically the maximum flow problem can be stated as: “A list of pipes is given, with different flow-capacities. These pipes are connected at their endpoints. What is the maximum amount of water that you can route from a given starting point to a given ending point?” or equivalently “A company owns a factory located in city X where products are manufactured that need to be transported to the distribution center in city Y.</description></item><item><title>About</title><link>https://tanayjha.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tanayjha.github.io/about/</guid><description>Making the Complex Simple and Easy to Understand!</description></item><item><title>Projects</title><link>https://tanayjha.github.io/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tanayjha.github.io/projects/</guid><description>A list of my projects!</description></item><item><title>Resume</title><link>https://tanayjha.github.io/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tanayjha.github.io/resume/</guid><description>Here is my resume!</description></item></channel></rss>